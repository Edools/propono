{"name":"Propono","tagline":"A pub/sub architecture as Ruby Gem","body":"# Propono\r\n\r\n[![Build Status](https://travis-ci.org/meducation/propono.png)](https://travis-ci.org/meducation/propono)\r\n[![Dependencies](https://gemnasium.com/meducation/propono.png?travis)](https://gemnasium.com/meducation/propono)\r\n[![Code Climate](https://codeclimate.com/github/meducation/propono.png)](https://codeclimate.com/github/meducation/propono)\r\n\r\nPropono is a [pub/sub](http://en.wikipedia.org/wiki/Publish-subscribe_pattern) gem built on top of Amazon Web Services (AWS). It uses Simple Notification Service (SNS) and Simple Queue Service (SQS) to seamlessly pass messages throughout your infrastructure.\r\n\r\nIt's beautifully simple to use.\r\n\r\n```ruby\r\n# On Machine A\r\nPropono.listen_to_queue('some-topic') do |message|\r\n  puts \"I just received: #{message}\"\r\nend\r\n\r\n# On Machine B\r\nPropono.publish('some-topic', \"The Best Message Ever\")\r\n\r\n# Output on Machine A a second later.\r\n# - \"I just recieved The Best Message Ever\"\r\n```\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'propono'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle install\r\n\r\n## Usage\r\n\r\nThe first thing to do is setup some configuration keys for Propono. It's best to do this in an initializer, or at the start of your application.\r\n\r\n```ruby\r\nPropono.config.access_key       = \"access-key\"       # From AWS\r\nPropono.config.secret_key       = \"secret-key\"       # From AWS\r\nPropono.config.queue_region     = \"queue-region\"     # From AWS\r\n```\r\n\r\nYou can then start publishing messages easily from anywhere in your codebase.\r\n\r\n```ruby\r\nPropono.publish('some-topic', \"Some string\")\r\nPropono.publish('some-topic', {some: ['hash', 'or', 'array']})\r\n```\r\n\r\nListening for messages is easy too. Just tell Propono what your application is called and start listening. You'll get a block yieleded for each message.\r\n\r\n```ruby\r\nPropono.config.application_name = \"application-name\" # Something unique to this app.\r\nPropono.listen_to_queue('some-topic') do |message|\r\n  # ... Do something interesting with the message\r\nend\r\n```\r\nIn the background, Propono is automatically setting up a queue using SQS, a notification system using SNS, and glueing them all together for you. But you don't have to worry about any of that.\r\n\r\n### Using TCP for messages\r\n\r\nPublishing directly to SNS takes about 15x longer than publishing over a simple TCP connection. It is therefore some times favourable to publish to a seperate machine listening for TCP messages, which will then proxy them on.\r\n\r\nTo send messages this way, you need to set up a little extra config:\r\n\r\n```ruby\r\nPropono.config.tcp_host = \"some.host.running.a.propono.listener\"\r\nPropono.config.tcp_port = 12543\r\n```\r\n\r\nYou then simply pass the `:tcp` protocol into `publish`\r\n\r\n```ruby\r\nPropono.publish('some-topic', message, protocol: :tcp)\r\n```\r\n\r\nYou'll now need another application running Propono to listen to the TCP feed. You can use the same machine or a different one, just make sure the port config is the same in both applications, and you're good to go.\r\n\r\n```ruby\r\nPropono.listen_to_tcp do |topic, message|\r\n  Propono.publish(topic, message) # Proxy the message to SNS\r\nend\r\n```\r\n\r\nThis proxying of TCP to SQS is used so often that there's a simple shortcut. Just run this on the machine receiving the TCP packets.\r\n\r\n```ruby\r\nPropono.proxy_tcp()\r\n```\r\n\r\n### Using UDP for messages\r\n\r\nIf you want almost-zero performance impact, and don't mind the occasional message getting lost, you can use UDP. We use this for things like our live dashboard where we don't mind losing a piece of activity here and there, but any perforamnce impact on our Meducation itself is bad news.\r\n\r\nSending messages in this way is very similar to using TCP. First add some config:\r\n\r\n```ruby\r\nPropono.config.udp_host = \"some.host.running.a.propono.listener\"\r\nPropono.config.udp_port = 12543\r\n```\r\n\r\nYou then simply pass the `:udp` protocol into `publish`:\r\n\r\n```ruby\r\nPropono.publish('some-topic', message, protocol: :udp)\r\n```\r\n\r\nAs per the `listen_to_tcp` method explained above, you now listen to udp or use the proxy method:\r\n\r\n```ruby\r\nPropono.listen_to_udp do |topic, message|\r\n  Propono.publish(topic, message) # Proxy the message to SNS\r\nend\r\n\r\nPropono.proxy_udp()\r\n```\r\n\r\n### Configuration\r\n\r\nThe following configuration settings are available:\r\n\r\n```\r\nPropono.config do |config|\r\n  config.access_key = \"An AWS access key\"\r\n  config.secret_key = \"A AWS secret key\"\r\n  config.queue_region = \"An AWS queue region\"\r\n  config.application_name = \"A name unique in your network\"\r\n  config.udp_host = \"The host of a machine used for UDP proxying\"\r\n  config.udp_port = \"The port of a machine used for UDP proxying\"\r\n  config.tcp_host = \"The host of a machine used for TCP proxying\"\r\n  config.tcp_port = \"The port of a machine used for TCP proxying\"\r\n  config.logger = \"A logger such as Log4r or Rails.logger\"\r\nend\r\n```\r\n\r\nThe can all also be setting using the `Propono.config.access_key = \"...\"` syntax.\r\n\r\n### Is it any good?\r\n\r\n[Yes.](http://news.ycombinator.com/item?id=3067434)\r\n\r\n## Contributing\r\n\r\nFirstly, thank you!! :heart::sparkling_heart::heart:\r\n\r\nWe'd love to have you involved. Please read our [contributing guide](https://github.com/meducation/propono/tree/master/CONTRIBUTING.md) for information on how to get stuck in.\r\n\r\n### Contributors\r\n\r\nThis project is managed by the [Meducation team](http://company.meducation.net/about#team). \r\n\r\nThese individuals have come up with the ideas and written the code that made this possible:\r\n\r\n- [Jeremy Walker](http://github.com/iHiD)\r\n- [Malcolm Landon](http://github.com/malcyL)\r\n- [Charles Care](http://github.com/ccare)\r\n- [Rob Styles](http://github.com/mmmmmrob)\r\n\r\n## Licence\r\n\r\nCopyright (C) 2013 New Media Education Ltd\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Affero General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Affero General Public License for more details.\r\n\r\nA copy of the GNU Affero General Public License is available in [Licence.md](https://github.com/meducation/propono/blob/master/LICENCE.md)\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}